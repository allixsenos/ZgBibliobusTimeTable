name: Build and Run

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - 'claude-input.log'
  workflow_dispatch:
    inputs:
      fetch_website:
        description: 'Fetch data from website'
        required: false
        type: boolean
        default: false

jobs:
  build-and-run:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore ZgBibliobusTimeTable.sln
      
    - name: Build
      run: dotnet build ZgBibliobusTimeTable.sln --configuration Release --no-restore
      
    - name: Enable website fetching if selected
      if: ${{ inputs.fetch_website }}
      run: |
        sed -i 's/\/\/>>> uncomment >>>//' ZgBibliobusTimeTable/Program.cs
      
    - name: Prepare sample data file
      run: |
        # Download sample content for testing
        # We don't need to create directories as our updated code handles this
        wget -O sample_data.html "https://www.kgz.hr/hr/knjiznice/bibliobusna-sluzba/raspored-bibliobusnih-stajalista/65960"
        
    - name: Run application
      run: |
        # Build the application first
        dotnet build ZgBibliobusTimeTable/ZgBibliobusTimeTable.csproj --configuration Release
        
        # Find the output directory where the app is built
        APP_DIR=$(find ZgBibliobusTimeTable/bin -name "net9.0" -type d)
        
        # Create Data directory in the build output dir
        mkdir -p "$APP_DIR/Data"
        
        # Copy the sample data
        cp sample_data.html "$APP_DIR/Data/index.html"
        
        # Run the application
        dotnet run --project ZgBibliobusTimeTable/ZgBibliobusTimeTable.csproj --configuration Release --no-build
      
    - name: Upload results
      run: |
        # Find the output directory where the app is built
        APP_DIR=$(find ZgBibliobusTimeTable/bin -name "net9.0" -type d)
        
        # Create a results directory for artifacts
        mkdir -p results
        
        # Copy the data directory and any output files
        cp -r "$APP_DIR/Data" results/
        
      # Upload as artifact
    - uses: actions/upload-artifact@v4
      with:
        name: output-data
        path: results/